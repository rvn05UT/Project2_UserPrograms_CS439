                    +--------------------------+
                     |           CS 439         |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+


For this design document, please *each* submit the header, but you do not need
to fill out the questions.  We will cover all questions (in content, if not in
form) in the interview.

When you have completed the header, submit it to the Canvas assignment
Project 2 Design and Documentation.  ***Your submission must be a text file and
each line must not extend past 80 characters.  (Note that rtf files are NOT text
files.)

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Slip days used on this project: 0

Name: Leonardo Leyva-Duenas
EID: LDL2253
CS login: leo14
Email: leoleyva@utexas.edu
Unique Number: 54885

Name: Rishi Natarajan
EID: RVN273
CS login: rvn05
Email: rishi.v.natarajan@gmail.com
Unique Number: 54895

Name: Samhith Konyala
EID: SK62423
CS login: Skon49
Email: Samhith.Konyala@utexas.edu
Unique Number: 54895

Name: Tao
EID: TLW3595
CS login: taowan
Email: twanlc@utexas.edu
Unique Number: 54895


---- PRELIMINARIES ----


>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>>


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
>>


>> Please paste a link to your GitLab repo below.
>>



                           ARGUMENT PASSING
                           ================


---- DATA STRUCTURES ----


>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', â€˜#defineâ€™, or
>> enumeration that was necessary to implement argument passing.  
>> Identify the purpose of each in 25 words or less.
>> We didn’t add any new global structure for argument passing, but we modified
process.c to use local variables for handling the argument list. We used argv[]
to store individual arguments after tokenizing the input command line, and argc
to count the number of arguments. These were then used to push the arguments 
onto the user stack. The existing stack pointer esp was updated as needed. The 
purpose was to correctly parse user commands, store them in memory, and make 
sure the arguments are arranged on the user stack in the correct order.


---- ALGORITHMS ----


>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?  Is it enough to limit
>> the size of the incoming commandline?  Why or Why not?
>> Our implementation of the argument parsing splits in the input command line 
using the strtok_r() funciton, which separated the command string into tokens. 
These tokens are stored temporarily in an array, and then pushed onto the stack
in reverse order to make sure that argv[0] points to the first argument. We 
ensure 4-byte alignment for stack and veify that the args and points don't 
exceed the stack page limit by check PHYS_BASE.


---- RATIONALE ----


>> A3: Why does Pintos implement strtok_r() but not strtok()?
>> It uses strtok_r() beacuse strtok() isn't thread-safe. The non-reentrant 
version uses internal static data to store parsing state, which would lead to 
data races and corruption if multiple threads were parsing command lines at the
same time. On the other hand, strtok_r() maintains its state in user-provied 
variables, which allows each thread to safely parse.


>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
>> In Pintos, the kernel performs argument separation, but in Unix-like 
systems, it's done by the shell. One advantage of the Unix approach is 
flexibility, meaning the shell can handle command parsing features like pipes 
and redirection without complicating the kernel. Another advantage is 
modularity, since parsing happens in user space, the kernel's system call 
interface remains simple and consistent.


                             SYSTEM CALLS
                             ============


---- DATA STRUCTURES ----


>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', â€˜#defineâ€™, or
>> enumeration.  Identify the purpose of each in 25 words or less.
>> We added a per-process file descriptor table to manage open files. In the 
thread structure, we added struct file **fd_table to the map file descriptors 
to their corresponding open file structure, and int fd_next to track the next 
available descriptor.


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
>> Each process maintains its own file descriptor table (fd_table), which 
stores pointers to open files. When a file is opened, it's assigned the lowest 
available descriptor number in that process's table. FDs are therefore unique 
only within a single process. Different processes can use the same descriptor 
number for different files without conflict because each process's descriptor 
table is isolated.


---- ALGORITHMS ----


>> B3: Describe your code for accessing user data in the
>> kernel.
>> To safely access user data from kernel space, we implemented helper methods 
that validate all user-provided pointers before dereferencing them. The 
function validate_user_ptr() checks that a pointer lies within user address 
space, while validate_user_buffer() and validate_user_string() make sure that 
buffers and strings are fully mapped in memory. These funcitons rely on 
pagedir_get_page() to confirm that each virtual address has a corresponding 
physical page mapping. If any pointer is invalid, the process is immediately 
terminated by calling exit(-1).


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  Based on your code, 
>> what is the least and the greatest possible number of inspections of 
>> the page table (e.g. calls to pagedir_get_page()) that might result?  
>> What about for a system call that only copies 2 bytes of data?  Is there 
>> room for improvement in these numbers, and how much?
>> When copying a full 4KB page from a user space to the kernel, our code could
inspect page table as many as 4096 times since the get_user_bytes() functino 
currently validates each byte in the range. The min number of inspections would
be one per page. For copying only two bytes, there would be one to two page 
table lookups, depending on whether the bytes a=cross a page boundary. There's 
room for improvement by validating memory at the page level instead of per 
byte, which would reduce the number of checks.



>> B5: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> sentences, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
>> Our strategy for handling invalid user memory accesses is to validate all 
pointers before any operation that could fail, and to terminate the process 
immediately if validation fails. This keeps the main system call code readable 
and prevents error-handling logic from ovewhelming the core funcitonality. For 
example, before reading or writing a buffer in the write() call, we first call 
validate_user_buffer(). If the buffer isn't valid, we print an error message 
and call exit(-1) without performing any more actions. This makes sure that no 
resources like locks or buffers remain allocated when a process exits due to 
an invalid access.


---- SYNCHRONIZATION ----


>> B6: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
>> The wait() system call allows a parent process to wait for one of its 
children to finish executing. When a child process finishes ,it signals the 
parent using a semaphore. The parent's wait() funciton blocks until this signal
is received, at which point it gets the child's exit status. Once the parent 
has collected the exit code, it cleans up the child's resources to prevent 
memory leaks.


>> B7: Consider parent process P with child process C.  Explain how
>> how your code ensures synchronization and avoids race conditions
>> in each of the following cases:
>> a) when P calls wait(C) before C exits?  
>> b) when P calls wait(C) after C exits?  
>> c) when P terminates without waiting before C exits?  
>> d) when P terminates without waiting after C exits?  
>> e) Are there any special cases?

>> A) The parent process P calls wait(C) and blocks on the semaphore. The child process 
C executes as normal but When C eventually exits, it signals the semaphore, letting P wake up, 
retrieve C's exit status and return from wait()

   B) The child C has already exited and stored its exit status in a shared data structure. 
   When P calls wait(C), it immediately find's C's exit status without needing to block and returns 
   the stored exit status while cleaning up C's resources

   C) Parent P exits without calling wait() on any of the children. Child C becomes an orphan but 
   continues executing. When C eventually exits, it cleans up its own resources since no parent is waiting, 
   ensuring all process resources are freed

   D) Child C has already exited and cleaned up all of its resources. Parent P is then exiting without 
   calling wait() and since C's resources are freed, we require no additional cleanup

   E) If P calls wait(C) twice, the second wait(C) call returns -1 almost immediately. If P calls wait() 
   on a non-child process, it returns -1. If C is then terminated by the kernel, wait() returns -1. All of 
   the resources need to be eventually freed, even if no parent is waiting for them



>> B8: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
>> The exec() system call uses a semaphore to coordinate between the parent and child processes.
The child process signals the parent only after it has either a) successfully loaded the executable or b) failed 
to load The parent then blocks on this synchronization prim until the child signals. The load success status is 
stored in a data structure within the child's thread structure. The child sets this status before signaling the 
parent and the parent reads this status after being signaled and returns -1 if the loading failed or returns the 
childs PID if the loading was successful.




---- RATIONALE ----


>> B9: What advantages or disadvantages can you see to your design
>> for file descriptors?
>> Our file descriptor design, which allocates a separate table per process, 
has isolation between processes. This prevents one process from interfering 
with another's files, which increases security. Although it has a small amount 
of memory ovehead per process, it makes it easy to clean up all open files when
a process exits by iterating through its table and closing each file.


>> B10: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
>> We kept the default identity mapping. We stuck with this approach as it was simple 
and straightforward, without any additional data structures needed. The identity mapping 
provides direct correspondence between kernel thread IDs  and process ID's, making implementation 
and eventual debugging to be easier.


                           SURVEY QUESTIONS
                           ================


Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.


>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
>>


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
>>


>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
>>


>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?
>>


>> Any other comments?
>>


